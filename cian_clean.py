import re
import numpy as np
import pandas as pd

df = pd.read_csv('cian_row.csv', delimiter=';', encoding='utf-8')
print(f"–£—Å–ø–µ—à–Ω–æ! –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
list_of_columns = df.columns.tolist()

# –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
df = df.iloc[1:].reset_index(drop=True)
df.drop(columns='Unnamed: 0', inplace=True)
df.drop(columns='Unnamed: 1', inplace=True)
df.drop(columns='Unnamed: 9', inplace=True)
df.drop(columns='Unnamed: 10', inplace=True)
df.drop(columns='Unnamed: 15', inplace=True)
df.drop(columns='Unnamed: 20', inplace=True)
df.drop(columns='Unnamed: 21', inplace=True)
df.drop(columns='Unnamed: 22', inplace=True)
df.drop(columns='Unnamed: 28', inplace=True)
df.drop(columns='Unnamed: 35', inplace=True)

# –ü—Ä–∏–≤–æ–¥–∏–º –≤ –ø–æ—Ä—è–¥–æ–∫ —è—á–µ–π–∫–∏
link_pattern = r'üîó\s*https?://[^\s]+|https?://[^\s]+'
symbol_pattern = r'\n‚úèÔ∏è'

for column in df.columns:
    if df[column].dtype == 'object':
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ NaN
        mask = df[column].astype(str).str.contains(link_pattern, regex=True)
        df.loc[mask, column] = np.nan

        # –£–¥–∞–ª—è–µ–º \n‚úèÔ∏è –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —è—á–µ–µ–∫
        df[column] = df[column].str.replace(symbol_pattern, '', regex=True)

        # –ó–∞–º–µ–Ω–∏—Ç—å Empty –Ω–∞ Nan
        empty_mask = df[column].astype(str).str.strip().str.lower() == 'empty'
        df.loc[empty_mask, column] = np.nan

# –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –±–æ–ª–µ–µ —á–µ–º 50% NaN
initial_columns = len(df.columns)
threshold = len(df) * 0.5
df = df.dropna(axis=1, thresh=threshold)  # –ò–∑–º–µ–Ω–µ–Ω–æ: —Ä–∞–±–æ—Ç–∞–µ–º —Å df –≤–º–µ—Å—Ç–æ df_cleaned
print(f"–ë—ã–ª–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {initial_columns}")
print(f"–°—Ç–∞–ª–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")

# –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π 2-–∫–æ–º–Ω. –∫–≤–∞—Ä—Ç–∏—Ä–∞, 36,77 –º¬≤, 4/31 —ç—Ç–∞–∂ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
def parse_apartment_info(text):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
    """
    if pd.isna(text):
        return pd.Series([None, None, None, None])

    text = str(text).strip()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    rooms = None
    area = None
    floor = None
    total_floors = None

    # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
    room_match = re.search(r'(\d+)-–∫–æ–º–Ω\.|–°—Ç—É–¥–∏—è', text)
    if room_match:
        if room_match.group(0) == '–°—Ç—É–¥–∏—è':
            rooms = 1
        else:
            rooms = int(room_match.group(1))

    # –ü–∞—Ä—Å–∏–º –ø–ª–æ—â–∞–¥—å
    area_match = re.search(r'(\d+[,.]\d+)\s*–º¬≤', text)
    if area_match:
        area_str = area_match.group(1).replace(',', '.')
        area = float(area_str)

    # –ü–∞—Ä—Å–∏–º —ç—Ç–∞–∂–∏
    floor_match = re.search(r'(\d+)/(\d+)\s*—ç—Ç–∞–∂', text)
    if floor_match:
        floor = int(floor_match.group(1))
        total_floors = int(floor_match.group(2))

    return pd.Series([rooms, area, floor, total_floors])

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ —Å—Ç–æ–ª–±—Ü—É
new_columns = df.pop('Unnamed: 2').apply(parse_apartment_info)
new_columns.columns = ['–ö–æ–º–Ω–∞—Ç—ã', '–ü–ª–æ—â–∞–¥—å', '–≠—Ç–∞–∂', '–≠—Ç–∞–∂–Ω–æ—Å—Ç—å']

# –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –Ω–∞—á–∞–ª–æ
for i, col_name in enumerate(['–ö–æ–º–Ω–∞—Ç—ã', '–ü–ª–æ—â–∞–¥—å', '–≠—Ç–∞–∂', '–≠—Ç–∞–∂–Ω–æ—Å—Ç—å']):
    df.insert(i, col_name, new_columns[col_name])

# –î–æ—Å—Ç–∞–µ–º —Ü–µ–Ω—É –∑–∞ –∫–≤ –º–µ—Ç—Ä
def extract_price(text):
    if pd.isna(text):
        return None
    text = str(text)
    # –ò—â–µ–º —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤–∞–ª—é—Ç—ã
    match = re.search(r'(\d[\d\s]*[\d,])\s*‚ÇΩ', text)
    if match:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        price_str = match.group(1).replace(' ', '').replace(',', '.')
        return int(price_str)
    return None

df['–¶–µ–Ω–∞ –∑–∞ –º¬≤'] = df['Unnamed: 17'].apply(extract_price)
df.drop(columns='Unnamed: 17', inplace=True)

# –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Å—Ç–æ–ª–±—Ü—ã
df.rename(columns={'Unnamed: 3': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—Ä–æ–∫–∞–º —Å–¥–∞—á–∏'}, inplace=True)
df.rename(columns={'Unnamed: 4': '–ò–ø–æ—Ç–µ–∫–∞ –∏ —Å–∫–∞–¥–∫–∏'}, inplace=True)
df.rename(columns={'Unnamed: 5': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ñ–ö'}, inplace=True)
df.rename(columns={'Unnamed: 8': '–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ'}, inplace=True)
df.rename(columns={'Unnamed: 11': '–†–∞–π–æ–Ω'}, inplace=True)
df.rename(columns={'Unnamed: 13': '–ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω'}, inplace=True)

df.rename(columns={'Unnamed: 19': '–ó–∞–π—Å—Ç—Ä–æ–π—â–∏–∫'}, inplace=True)
df.rename(columns={'Unnamed: 40': '–û—Å—Ç–∞–ª–æ—Å—å –∫–≤–∞—Ä—Ç–∏—Ä'}, inplace=True)
# –°–º–æ—Ç—Ä–∏–º —á—Ç–æ –≤—ã—à–ª–æ –≤ –∏—Ç–æ–≥–µ
pd.set_option('display.max_columns', None)
print(df.head(20))

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
df.to_csv('cian_clean.csv', index=False, sep=';', encoding='utf-8')